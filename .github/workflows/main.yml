# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Configure page file
        uses: al-cheb/configure-pagefile-action@master
        with:
          minimum-size: 32GB
          maximum-size: 32GB
          disk-root: "C:"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@master
        with:
          fetch-depth: 0

      # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
      - name: Generate build version
        id: generate-version
        uses: aarnott/nbgv@master
        with:
          setAllVars: true

      - name: Update manifest
        run: |
          $path = "${{github.workspace}}/src/Main/Package.appxmanifest"
          $version = "${{steps.generate-version.outputs.Version}}"
          [xml] $manifest = Get-Content $path
          $manifest.Package.Identity.Version = $version
          $manifest.Save($path)

      - name: Generate certificate file
        run: |
          $certificate = [System.Convert]::FromBase64String("${{secrets.BASE64_ENCODED_PFX}}")
          $path = "${{github.workspace}}/src/Main/Main_TemporaryKey.pfx"
          [IO.File]::WriteAllBytes($path, $certificate)

      # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build the solution
        run: |
          $certificate = "Main_TemporaryKey.pfx"
          $solution = "Starter.sln"
          msbuild $solution -p:AppxPackageSigningEnabled=True -p:Configuration=Release -p:PackageCertificateKeyFile=$certificate -p:Platform=x64

      - name: Remove certificate file
        run: |
          $path = "${{github.workspace}}/src/Main/Main_TemporaryKey.pfx"
          Remove-Item -path $path

      - name: Create artifacts
        run: |
          $destination = "${{github.workspace}}/src/Main/AppPackages/OpenInk_Win_${{steps.generate-version.outputs.Version}}.zip"
          $source = "${{github.workspace}}/src/Main/AppPackages/*"
          Compress-Archive -Path $source -DestinationPath $destination

      - name: Create release
        id: create-release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: v${{steps.generate-version.outputs.Version}}
          release_name: RC ${{steps.generate-version.outputs.Version}}
          draft: false
          prerelease: false

      - name: Upload packages
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          asset_content_type: application/zip
          asset_name: "OpenInk_Win_${{steps.generate-version.outputs.Version}}.zip"
          asset_path: "${{github.workspace}}/src/Main/AppPackages/OpenInk_Win_${{steps.generate-version.outputs.Version}}.zip"
          upload_url: "${{steps.create-release.outputs.upload_url}}"
